// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    Int?
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]

  createdProductSizings ProductSizing[] @relation("CreatedProductSizings")
  updatedProductSizings ProductSizing[] @relation("UpdatedProductSizings")

  createdProductFittings ProductFitting[] @relation("CreatedProductFittings")
  updatedProductFittings ProductFitting[] @relation("UpdatedProductFittings")

  createdProductTypes ProductType[] @relation("CreatedProductTypes")
  updatedProductTypes ProductType[] @relation("UpdatedProductTypes")

  createdProductBrands ProductBrand[] @relation("CreatedProductBrands")
  updatedProductBrands ProductBrand[] @relation("UpdatedProductBrands")
}

model ProductSizing {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUser               User?                         @relation("CreatedProductSizings", fields: [createdByUserId], references: [id])
  createdByUserId             Int?
  updatedByUser               User?                         @relation("UpdatedProductSizings", fields: [updatedByUserId], references: [id])
  updatedByUserId             Int?
  isArchived                  DateTime?
  productFittings             ProductFitting[]
  ProductFittingProductSizing ProductFittingProductSizing[]
}

model ProductFitting {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUser               User?                         @relation("CreatedProductFittings", fields: [createdByUserId], references: [id])
  createdByUserId             Int?
  updatedByUser               User?                         @relation("UpdatedProductFittings", fields: [updatedByUserId], references: [id])
  updatedByUserId             Int?
  isArchived                  DateTime?
  productSizings              ProductSizing[]
  ProductFittingProductSizing ProductFittingProductSizing[]
}

model ProductFittingProductSizing {
  id               Int            @id @default(autoincrement())
  productSizing    ProductSizing  @relation(fields: [productSizingId], references: [id])
  productSizingId  Int
  productFitting   ProductFitting @relation(fields: [productFittingId], references: [id])
  productFittingId Int
}

model ProductType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUser   User?     @relation("CreatedProductTypes", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User?     @relation("UpdatedProductTypes", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?
  isArchived      DateTime?
}

model ProductBrand {
  id         Int       @id @default(autoincrement())
  name       String
  mediaId    Int?      @unique
  createdBy  Int
  updatedBy  Int
  isArchived DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  media           Media? @relation(fields: [mediaId], references: [id])
  createdByUser   User?  @relation("CreatedProductBrands", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User?  @relation("UpdatedProductBrands", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?
}

model Media {
  id         Int       @id @default(autoincrement())
  url        String
  productId  Int?
  createdBy  Int
  updatedBy  Int
  isArchived DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // product ProductBrand? @relation(fields: [productId], references: [id])
  ProductBrand ProductBrand?
}
