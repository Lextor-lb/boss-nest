// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One to Many Inverse
  createdProductSizings ProductSizing[] @relation("CreatedProductSizings")
  updatedProductSizings ProductSizing[] @relation("UpdatedProductSizings")

  createdProductFittings ProductFitting[] @relation("CreatedProductFittings")
  updatedProductFittings ProductFitting[] @relation("UpdatedProductFittings")

  createdProductTypes ProductType[] @relation("CreatedProductTypes")
  updatedProductTypes ProductType[] @relation("UpdatedProductTypes")

  createdProductBrands ProductBrand[] @relation("CreatedProductBrands")
  updatedProductBrands ProductBrand[] @relation("UpdatedProductBrands")

  createdProductCategories ProductCategory[] @relation("CreatedProductCategories")
  updatedProductCategories ProductCategory[] @relation("UpdatedProductCategories")

  createdProducts Product[] @relation("CreatedProducts")
  updatedProducts Product[] @relation("UpdatedProducts")

  createdProductVariants ProductVariant[] @relation("CreatedProductVariants")
  updatedProductVariants ProductVariant[] @relation("UpdatedProductVariants")

  createdCustomers Customer[] @relation("CreatedCustomers")
  updatedCustomers Customer[] @relation("UpdatedCustomers")

  createdSpecials Special[] @relation("CreatedSpecials")
  updatedSpecials Special[] @relation("UpdatedSpecials")
}

model ProductSizing {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //  One to Many
  createdByUser   User?     @relation("CreatedProductSizings", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User?     @relation("UpdatedProductSizings", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?
  isArchived      DateTime?

  // Many to Many
  productFittings             ProductFitting[]
  ProductFittingProductSizing ProductFittingProductSizing[]

  // One to One Inverse
  productVariants ProductVariant[] @relation("ProductSizingVariants")
}

model ProductFitting {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One to Many
  createdByUser   User?     @relation("CreatedProductFittings", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User?     @relation("UpdatedProductFittings", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?
  isArchived      DateTime?

  // Many to Many
  productSizings              ProductSizing[]
  ProductFittingProductSizing ProductFittingProductSizing[]

  productCategories             ProductCategory[]
  ProductCategoryProductFitting ProductCategoryProductFitting[]

  // One to Many Inverse
  products Product[] @relation("ProductFittingProducts")
}

model ProductFittingProductSizing {
  id               Int            @id @default(autoincrement())
  productSizing    ProductSizing  @relation(fields: [productSizingId], references: [id])
  productSizingId  Int
  productFitting   ProductFitting @relation(fields: [productFittingId], references: [id])
  productFittingId Int
}

model ProductBrand {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One to One
  media   Media? @relation(fields: [mediaId], references: [id])
  mediaId Int?   @unique

  // One to Many
  createdByUser   User? @relation("CreatedProductBrands", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User? @relation("UpdatedProductBrands", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?

  // One to Many Inverse
  products   Product[] @relation("ProductBrandProducts")
  isArchived DateTime?
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One to Many
  product   Product? @relation("ProductMedias", fields: [productId], references: [id])
  productId Int?

  // One to One Inverse
  ProductBrand   ProductBrand?
  productVariant ProductVariant?

  isArchived DateTime?
}

model ProductType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One to Many
  createdByUser   User? @relation("CreatedProductTypes", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User? @relation("UpdatedProductTypes", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?

  // One to Many Inverse
  productCategories ProductCategory[] @relation("ProductTypeCategories")

  products Product[] @relation("ProductTypeProducts")

  isArchived DateTime?
}

model ProductCategory {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One to Many
  createdByUser   User? @relation("CreatedProductCategories", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User? @relation("UpdatedProductCategories", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?

  productType   ProductType @relation("ProductTypeCategories", fields: [productTypeId], references: [id])
  productTypeId Int

  // Many to Many
  productFittings               ProductFitting[]
  ProductCategoryProductFitting ProductCategoryProductFitting[]

  // One to Many Inverse
  products Product[] @relation("ProductCategoryProducts")

  isArchived DateTime?
}

model ProductCategoryProductFitting {
  id                Int             @id @default(autoincrement())
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int
  productFitting    ProductFitting  @relation(fields: [productFittingId], references: [id])
  productFittingId  Int
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isEcommerce Boolean
  isPos       Boolean
  gender      Gender
  stockPrice  Int
  salePrice   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // One to Many
  createdByUser   User? @relation("CreatedProducts", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User? @relation("UpdatedProducts", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?

  productBrand   ProductBrand @relation("ProductBrandProducts", fields: [productBrandId], references: [id])
  productBrandId Int

  productType   ProductType @relation("ProductTypeProducts", fields: [productTypeId], references: [id])
  productTypeId Int

  productCategory   ProductCategory @relation("ProductCategoryProducts", fields: [productCategoryId], references: [id])
  productCategoryId Int

  productFitting   ProductFitting @relation("ProductFittingProducts", fields: [productFittingId], references: [id])
  productFittingId Int

  // One to Many Inverse
  medias          Media[]          @relation("ProductMedias")
  productVariants ProductVariant[] @relation("ProductProductVariants")

  isArchived DateTime?
}

model ProductVariant {
  id          Int          @id @default(autoincrement())
  shopCode    String
  productCode String
  colorCode   String
  barcode     String       @unique
  statusStock StatusStock?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // One to Many
  createdByUser   User? @relation("CreatedProductVariants", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User? @relation("UpdatedProductVariants", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?

  product   Product @relation("ProductProductVariants", fields: [productId], references: [id])
  productId Int

  productSizing   ProductSizing? @relation("ProductSizingVariants", fields: [productSizingId], references: [id])
  productSizingId Int

  media   Media? @relation(fields: [mediaId], references: [id])
  mediaId Int?   @unique

  isArchived DateTime?
}

enum Gender {
  MAN
  LADY
  UNISEX
}

enum StatusStock {
  SOLDOUT
}

model Customer {
  id          Int     @id @default(autoincrement())
  name        String
  phoneNumber Int     @unique
  address     String?
  remark      String?

  // One to Many
  createdByUser   User? @relation("CreatedCustomers", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User? @relation("UpdatedCustomers", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?

  // Many to One
  special   Special @relation(fields: [specialId], references: [id])
  specialId Int  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Special {
  id            Int  @id @default(autoincrement())
  name          String
  promotionRate Int
  isArchived    DateTime?

  // One to Many
  createdByUser   User? @relation("CreatedSpecials", fields: [createdByUserId], references: [id])
  createdByUserId Int?
  updatedByUser   User? @relation("UpdatedSpecials", fields: [updatedByUserId], references: [id])
  updatedByUserId Int?

  // One to Many Inverse
  customers Customer[] // This defines the one-to-many relationship

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
